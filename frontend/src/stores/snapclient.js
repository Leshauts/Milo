// frontend/src/stores/snapclient.js

/**
 * Store Pinia pour la gestion de l'√©tat de Snapclient.
 */
import { defineStore } from 'pinia';
import { ref, computed, watch } from 'vue';
import axios from 'axios';

export const useSnapclientStore = defineStore('snapclient', () => {
  // √âtat interne
  const isActive = ref(false);
  const isConnected = ref(false);
  const deviceName = ref(null);
  const host = ref(null);
  const pluginState = ref('inactive');
  const discoveredServers = ref([]);
  const error = ref(null);
  const lastAction = ref(null);
  const isLoading = ref(false);
  const blacklistedServers = ref([]);
  const lastStatusCheck = ref(0);
  const statusCheckInterval = ref(null);

  // Getters
  const hasServers = computed(() => discoveredServers.value.length > 0);
  const currentServer = computed(() => {
    if (!isConnected.value) return null;
    return {
      name: deviceName.value,
      host: host.value
    };
  });

  function updateFromStateEvent(data) {
    console.log("üîÑ Mise √† jour directe depuis √©v√©nement d'√©tat:", data.plugin_state);

    // V√©rifier que les donn√©es viennent bien de snapclient
    if (data.source !== 'snapclient') return false;

    // Mise √† jour IMM√âDIATE de l'√©tat sans appel r√©seau
    pluginState.value = data.plugin_state;

    if (data.plugin_state === 'connected' && data.connected === true) {
      isConnected.value = true;
      deviceName.value = data.device_name || 'Serveur inconnu';
      host.value = data.host;
      error.value = null;

      // D√©clencher l'√©v√©nement pour une propagation plus rapide
      window.dispatchEvent(new CustomEvent('snapclient-connection-changed', {
        detail: { connected: true }
      }));

      console.log("‚úÖ √âtat mis √† jour: connect√© √†", deviceName.value);
    }
    else if (data.plugin_state === 'ready_to_connect') {
      // V√©rifier s'il y a un changement d'√©tat r√©el avant de mettre √† jour
      if (isConnected.value) {
        isConnected.value = false;
        deviceName.value = null;
        host.value = null;

        // D√©clencher l'√©v√©nement uniquement si l'√©tat a chang√©
        window.dispatchEvent(new CustomEvent('snapclient-connection-changed', {
          detail: { connected: false }
        }));
      }
      console.log("‚úÖ √âtat mis √† jour: pr√™t √† connecter");
    }

    return true;
  }

  /**
   * Met √† jour l'√©tat du store en fonction d'un √©v√©nement WebSocket.
   */
  function updateFromWebSocketEvent(eventType, data) {
    console.log(`‚ö° Mise √† jour directe du store depuis: ${eventType}`);

    // PRIORIT√â AUX √âV√âNEMENTS DE D√âCONNEXION - traitement imm√©diat et sans d√©lai
    if (eventType === 'snapclient_monitor_disconnected' || eventType === 'snapclient_server_disappeared') {
      console.log("üî¥ D√©connexion d√©tect√©e via WebSocket, mise √† jour instantan√©e de l'UI");

      // Mise √† jour synchrone et imm√©diate de l'√©tat
      isConnected.value = false;
      deviceName.value = null;
      host.value = null;
      pluginState.value = 'ready_to_connect';
      error.value = `Le serveur ${data.host} s'est d√©connect√©`;

      // SUPPRESSION DU D√âLAI - Ne pas attendre pour rafra√Æchir l'√©tat
      // Appel synchrone au lieu d'utiliser setTimeout
      fetchStatus(true).catch(err => {
        console.warn('Erreur non bloquante lors du refresh apr√®s d√©connexion:', err);
      });

      // √âmettre un √©v√©nement de mise √† jour pour les autres composants
      try {
        window.dispatchEvent(new CustomEvent('snapclient-connection-changed', {
          detail: { connected: false, source: eventType }
        }));
      } catch (e) {
        console.warn("Impossible d'√©mettre l'√©v√©nement custom:", e);
      }

      return true;
    }

    if (eventType === 'snapclient_monitor_connected') {
      console.log(`‚ö° Moniteur connect√© √† ${data.host}`);
      error.value = null;

      // Optimisation: v√©rifier ici si nous sommes d√©j√† connect√©s au m√™me serveur
      if (host.value === data.host) {
        isConnected.value = true;
        pluginState.value = 'connected';
      }

      return true;
    }

    // Autres √©v√©nements non g√©r√©s
    return false;
  }

  /**
   * R√©cup√®re le statut actuel du plugin Snapclient.
   */
  async function fetchStatus(force = false) {
    try {
      // √âviter les requ√™tes trop fr√©quentes
      const now = Date.now();
      if (!force && isLoading.value && now - lastStatusCheck.value < 2000) {
        console.log("üîÑ Requ√™te fetchStatus ignor√©e (d√©j√† en cours ou trop r√©cente)");
        return { cached: true };
      }

      lastStatusCheck.value = now;
      isLoading.value = true;
      error.value = null;

      const response = await axios.get('/api/snapclient/status');
      const data = response.data;

      if (data.status === 'error') {
        throw new Error(data.message);
      }

      console.log("üìä Statut Snapclient re√ßu:", {
        is_active: data.is_active,
        device_connected: data.device_connected,
        servers: data.discovered_servers?.length || 0
      });

      // Mise √† jour de l'√©tat
      isActive.value = data.is_active === true;

      // V√©rifier s'il y a un changement d'√©tat de connexion
      const wasConnected = isConnected.value;
      isConnected.value = data.device_connected === true;

      // Si l'√©tat de connexion a chang√©, le signaler
      if (wasConnected !== isConnected.value) {
        console.log(`‚ö° Changement d'√©tat de connexion d√©tect√©: ${wasConnected ? 'connect√©' : 'd√©connect√©'} -> ${isConnected.value ? 'connect√©' : 'd√©connect√©'}`);

        // √âmettre un √©v√©nement personnalis√© pour informer les composants de ce changement
        try {
          const connectionEvent = new CustomEvent('snapclient-connection-changed', {
            detail: { connected: isConnected.value }
          });
          window.dispatchEvent(connectionEvent);
        } catch (e) {
          console.warn("Impossible d'√©mettre l'√©v√©nement custom:", e);
        }
      }

      deviceName.value = data.device_name;
      host.value = data.host;

      // Mise √† jour explicite des serveurs d√©couverts
      if (data.discovered_servers) {
        console.log(`üìä Mise √† jour des serveurs: ${data.discovered_servers.length} serveurs`);
        discoveredServers.value = [...data.discovered_servers];
      }

      if (data.blacklisted_servers) {
        blacklistedServers.value = data.blacklisted_servers;
      }

      // D√©duction de l'√©tat du plugin
      if (!isActive.value) {
        pluginState.value = 'inactive';
      } else if (isConnected.value) {
        pluginState.value = 'connected';
      } else {
        pluginState.value = 'ready_to_connect';
      }

      return data;
    } catch (err) {
      console.error('Erreur lors de la r√©cup√©ration du statut Snapclient:', err);
      error.value = err.message || 'Erreur lors de la r√©cup√©ration du statut';

      // Si on re√ßoit une erreur 500 ou une erreur r√©seau, il y a peut-√™tre un probl√®me avec le serveur
      // ou la connexion. Dans ce cas, consid√©rons que nous sommes d√©connect√©s.
      if (err.response?.status >= 500 || err.code === 'ECONNABORTED' || err.message.includes('Network Error')) {
        console.warn("Erreur serveur, marquage comme d√©connect√©");
        isConnected.value = false;
        deviceName.value = null;
        host.value = null;
        pluginState.value = 'ready_to_connect';
      }

      throw err;
    } finally {
      isLoading.value = false;
    }
  }


  /**
 * D√©clenche une d√©couverte des serveurs Snapcast sur le r√©seau.
 */
  async function discoverServers() {
    if (!isActive.value) {
      return { success: false, inactive: true };
    }

    try {
      isLoading.value = true;
      error.value = null;
      lastAction.value = 'discover';

      const response = await axios.post('/api/snapclient/discover');
      const data = response.data;

      if (data.status === 'error') {
        throw new Error(data.message);
      }

      // Mettre √† jour la liste des serveurs d√©couverts
      if (data.servers) {
        discoveredServers.value = data.servers;

        // Si on n'est pas connect√© et qu'on a exactement un serveur,
        // essayer de s'y connecter automatiquement
        if (!isConnected.value && data.servers.length === 1) {
          const server = data.servers[0];

          // V√©rifier si c'est le dernier serveur connu
          let lastServer = null;
          try {
            const savedServer = localStorage.getItem('lastSnapclientServer');
            if (savedServer) {
              lastServer = JSON.parse(savedServer);
            }
          } catch (e) {
            console.error("Erreur lors de la lecture du dernier serveur:", e);
          }

          // Si c'est le m√™me serveur que le dernier utilis√© ou s'il n'y a qu'un serveur,
          // se connecter automatiquement
          if (lastServer && lastServer.host === server.host) {
            console.log("üîÑ Reconnexion automatique au dernier serveur:", server.name);
            setTimeout(() => {
              connectToServer(server.host);
            }, 500);
          }
        }
      }

      return data;
    } catch (err) {
      console.error('Erreur lors de la d√©couverte des serveurs:', err);
      error.value = err.message || 'Erreur lors de la d√©couverte des serveurs';
      throw err;
    } finally {
      isLoading.value = false;
    }
  }

  /**
   * Se connecte √† un serveur Snapcast sp√©cifique avec v√©rification pr√©alable.
   */
  async function connectToServer(serverHost) {
    if (!isActive.value) {
      return { success: false, inactive: true };
    }

    // V√©rifier si nous sommes d√©j√† connect√©s √† ce serveur
    if (isConnected.value && host.value === serverHost) {
      console.log(`üîå D√©j√† connect√© √† ${serverHost}, connexion ignor√©e`);
      return { success: true, already_connected: true };
    }

    try {
      isLoading.value = true;
      error.value = null;
      lastAction.value = 'connect';

      // V√©rifier la blacklist
      if (blacklistedServers.value.includes(serverHost)) {
        error.value = `Le serveur ${serverHost} a √©t√© d√©connect√© manuellement. Changez de source audio pour pouvoir vous y reconnecter.`;
        throw new Error(error.value);
      }

      // Enregistrer ce serveur comme dernier serveur utilis√©
      try {
        localStorage.setItem('lastSnapclientServer', JSON.stringify({
          host: serverHost,
          timestamp: Date.now()
        }));
      } catch (e) {
        console.warn("Impossible d'enregistrer le dernier serveur:", e);
      }

      // Mettre √† jour l'√©tat imm√©diatement (optimistic UI update)
      // Cela assure que l'UI se met √† jour m√™me si la requ√™te est lente
      isConnected.value = true;
      pluginState.value = 'connected';
      host.value = serverHost;

      // Si le serveur est pr√©sent dans la liste des d√©couverts, utiliser son nom
      const server = discoveredServers.value.find(s => s.host === serverHost);
      if (server) {
        deviceName.value = server.name;
      } else {
        deviceName.value = `Serveur (${serverHost})`;
      }

      // Envoyer la requ√™te de connexion au backend
      const response = await axios.post(`/api/snapclient/connect/${serverHost}`);
      const data = response.data;

      if (data.status === 'error') {
        // Annuler la mise √† jour optimiste en cas d'√©chec
        isConnected.value = false;
        pluginState.value = 'ready_to_connect';
        host.value = null;
        deviceName.value = null;
        throw new Error(data.message);
      }

      if (data.blacklisted === true) {
        // Annuler la mise √† jour optimiste en cas de blacklist
        isConnected.value = false;
        pluginState.value = 'ready_to_connect';
        host.value = null;
        deviceName.value = null;
        error.value = `Le serveur ${serverHost} a √©t√© d√©connect√© manuellement. Changez de source audio pour pouvoir vous y reconnecter.`;
        throw new Error(error.value);
      }

      // Mise √† jour compl√®te apr√®s connexion (but keep optimistic values if API fails)
      try {
        await fetchStatus(true);
      } catch (statusErr) {
        console.warn("Erreur lors de la mise √† jour du statut apr√®s connexion:", statusErr);
        // Ne pas r√©initialiser l'√©tat optimiste m√™me si fetchStatus √©choue
      }

      // D√©marrer le polling pour maintenir l'√©tat synchronis√©
      startPolling();

      return data;
    } catch (err) {
      console.error(`Erreur lors de la connexion au serveur ${serverHost}:`, err);
      error.value = error.value || err.message || `Erreur lors de la connexion au serveur ${serverHost}`;

      // S'assurer que l'√©tat refl√®te l'√©chec de connexion
      isConnected.value = false;
      pluginState.value = 'ready_to_connect';
      host.value = null;
      deviceName.value = null;

      throw err;
    } finally {
      isLoading.value = false;
    }
  }

  /**
   * Se d√©connecte du serveur Snapcast actuel.
   */
  async function disconnectFromServer() {
    try {
      isLoading.value = true;
      error.value = null;
      lastAction.value = 'disconnect';

      const response = await axios.post('/api/snapclient/disconnect');
      const data = response.data;

      // Mise √† jour de la blacklist
      if (data.blacklisted) {
        blacklistedServers.value = data.blacklisted;
      }

      // Forcer l'√©tat local √† d√©connect√© imm√©diatement (pour une UI plus r√©active)
      isConnected.value = false;
      deviceName.value = null;
      host.value = null;
      pluginState.value = 'ready_to_connect';

      // Mise √† jour apr√®s d√©connexion
      try {
        await fetchStatus();
      } catch (statusErr) {
        console.warn('Erreur lors de la mise √† jour du statut apr√®s d√©connexion:', statusErr);
      }

      return data;
    } catch (err) {
      console.error('Erreur lors de la d√©connexion du serveur:', err);
      error.value = err.message || 'Erreur lors de la d√©connexion du serveur';

      // M√™me en cas d'erreur, forcer l'√©tat √† d√©connect√©
      isConnected.value = false;
      deviceName.value = null;
      host.value = null;
      pluginState.value = 'ready_to_connect';

      return { status: "forced_disconnect", message: "D√©connexion forc√©e apr√®s erreur" };
    } finally {
      isLoading.value = false;
    }
  }

  /**
   * G√®re les mises √† jour WebSocket pour Snapclient.
   */
  function handleWebSocketUpdate(eventType, data) {
    if (!data) return;

    // √âv√©nements sp√©cifiques √† snapclient
    if (data.source === 'snapclient') {
      if (eventType === 'audio_status_updated') {
        if (data.plugin_state) {
          pluginState.value = data.plugin_state;
        }

        if (data.plugin_state === 'connected' && data.connected === true) {
          isConnected.value = true;
          deviceName.value = data.device_name || 'Serveur inconnu';
          host.value = data.host;
        } else if (data.plugin_state === 'ready_to_connect') {
          isConnected.value = false;
          deviceName.value = null;
          host.value = null;
        }
      }
    }

    // √âv√©nements de changement d'√©tat audio
    if (eventType === 'audio_state_changed') {
      if (data.current_state === 'macos') {
        fetchStatus();
        startPolling();
      } else if (data.from_state === 'macos') {
        reset();
        stopPolling();
      }
    }

    // Erreurs de transition
    if (eventType === 'audio_transition_error' && data.error && data.error.includes('server')) {
      fetchStatus();
    }
  }

  /**
   * D√©marre le polling p√©riodique du statut
   */
  function startPolling() {
    // Arr√™ter tout polling existant
    stopPolling();

    // D√©marrer un nouveau polling toutes les 5 secondes
    statusCheckInterval.value = setInterval(() => {
      if (isConnected.value) {
        // Si connect√©, v√©rifier que la connexion est toujours valide
        fetchStatus(false).catch(err => {
          console.warn("Erreur dans le polling de statut:", err);
        });
      }
    }, 5000);

    console.log("üì° Polling de statut d√©marr√©");
  }

  /**
   * Arr√™te le polling p√©riodique
   */
  function stopPolling() {
    if (statusCheckInterval.value) {
      clearInterval(statusCheckInterval.value);
      statusCheckInterval.value = null;
      console.log("üì° Polling de statut arr√™t√©");
    }
  }

  /**
   * R√©initialise l'√©tat du store.
   */
  function reset() {
    isActive.value = false;
    isConnected.value = false;
    deviceName.value = null;
    host.value = null;
    pluginState.value = 'inactive';
    discoveredServers.value = [];
    error.value = null;
    lastAction.value = null;
    // Ne pas r√©initialiser la blacklist - conserv√©e jusqu'au changement de source audio

    // Arr√™ter le polling
    stopPolling();
  }

  // D√©marrer/arr√™ter le polling en fonction de l'√©tat de connexion
  watch(isConnected, (newValue) => {
    if (newValue === true) {
      console.log("‚ö° Connexion d√©tect√©e, d√©marrage du polling");
      startPolling();
    }
  });

  return {
    // √âtat
    isActive,
    isConnected,
    deviceName,
    host,
    pluginState,
    discoveredServers,
    error,
    lastAction,
    isLoading,

    // Getters
    hasServers,
    currentServer,
    blacklistedServers,

    // Actions
    fetchStatus,
    discoverServers,
    connectToServer,
    disconnectFromServer,
    handleWebSocketUpdate,
    reset,
    updateFromWebSocketEvent,
    updateFromStateEvent,
    startPolling,
    stopPolling
  };
});